/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndClear.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/SlideMenu.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void onVppToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onFreqToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onPeriodToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onBackButtonClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onDisplayMenuClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onMeasureMenuClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onSlideMenuUpdated()
    {
        // Override and implement this function in Screen1
    }
    virtual void onXScaleToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onYScaleToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onOffsetToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onTriggerMenuClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onLevelToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onTriggerTypeClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onCursorMenuClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void onCursor1XToggled()
    {
        // Override and implement this function in Screen1
    }
    virtual void onCursor1YToggled()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box background1;
    touchgfx::GraphWrapAndClear<200> displayGraph;
    touchgfx::GraphElementGridX displayGraphMajorXAxisGrid;
    touchgfx::GraphElementGridY displayGraphMajorYAxisGrid;
    touchgfx::GraphElementBoxes displayGraphBoxes1;
    touchgfx::TextAreaWithOneWildcard dispXText;
    touchgfx::TextAreaWithOneWildcard dispYText;
    touchgfx::TextAreaWithOneWildcard VppText;
    touchgfx::TextAreaWithOneWildcard freqText;
    touchgfx::TextAreaWithOneWildcard periodText;
    touchgfx::Line horizontalLine0;
    touchgfx::PainterRGB565 horizontalLine0Painter;
    touchgfx::Line horizontalLine1;
    touchgfx::PainterRGB565 horizontalLine1Painter;
    touchgfx::Line verticalLine0;
    touchgfx::PainterRGB565 verticalLine0Painter;
    touchgfx::Line verticalLine1;
    touchgfx::PainterRGB565 verticalLine1Painter;
    touchgfx::SlideMenu slideMenu1;
    touchgfx::Container mainMenu;
    touchgfx::Button switchButton1;
    touchgfx::TextArea switchText;
    touchgfx::Button displayMenuButton;
    touchgfx::Button cursorMenuButton;
    touchgfx::TextArea displayText;
    touchgfx::TextArea cursorText;
    touchgfx::Button measureMenuButton;
    touchgfx::TextArea measureText;
    touchgfx::Button triggerMenuButton;
    touchgfx::TextArea triggerText;
    touchgfx::Container measureMenu;
    touchgfx::ToggleButton VppToggle;
    touchgfx::TextArea vppToggleText;
    touchgfx::ToggleButton freqToggle;
    touchgfx::TextArea freqToggleText;
    touchgfx::ToggleButton periodToggle;
    touchgfx::TextArea periodToggleText;
    touchgfx::Container displayMenu;
    touchgfx::ToggleButton XScaleToggle;
    touchgfx::TextArea XScaleText;
    touchgfx::ToggleButton YScaleToggle;
    touchgfx::TextArea YScaleText;
    touchgfx::ToggleButton offsetToggle;
    touchgfx::TextArea offsetText;
    touchgfx::Container triggerMenu;
    touchgfx::ToggleButton levelToggle;
    touchgfx::TextArea levelText;
    touchgfx::Button triggerTypeButton;
    touchgfx::TextAreaWithOneWildcard triggerTypeText;
    touchgfx::Container cursorMenu;
    touchgfx::ToggleButton cursor1YToggle;
    touchgfx::ToggleButton cursor1XToggle;
    touchgfx::TextArea cursor1YText;
    touchgfx::TextArea cursor1XText;
    touchgfx::ButtonWithIcon backButton;
    touchgfx::TextArea textArea1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t DISPXTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar dispXTextBuffer[DISPXTEXT_SIZE];
    static const uint16_t DISPYTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar dispYTextBuffer[DISPYTEXT_SIZE];
    static const uint16_t VPPTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar VppTextBuffer[VPPTEXT_SIZE];
    static const uint16_t FREQTEXT_SIZE = 12;
    touchgfx::Unicode::UnicodeChar freqTextBuffer[FREQTEXT_SIZE];
    static const uint16_t PERIODTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar periodTextBuffer[PERIODTEXT_SIZE];
    static const uint16_t TRIGGERTYPETEXT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar triggerTypeTextBuffer[TRIGGERTYPETEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::SlideMenu&> slideMenuStateChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void slideMenuStateChangedCallbackHandler(const touchgfx::SlideMenu& src);

};

#endif // SCREEN1VIEWBASE_HPP
