/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    updateItemCallback(this, &Screen1ViewBase::updateItemCallbackHandler),
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background1.setPosition(0, 0, 480, 272);
    background1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(background1);

    displayGraph.setPosition(15, 10, 450, 200);
    displayGraph.setScale(1);
    displayGraph.setGraphAreaMargin(0, 0, 0, 0);
    displayGraph.setGraphAreaPadding(0, 0, 0, 0);
    displayGraph.setGraphRangeY(0, 260);
    displayGraphMajorXAxisGrid.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    displayGraphMajorXAxisGrid.setInterval(40);
    displayGraphMajorXAxisGrid.setLineWidth(1);
    displayGraphMajorXAxisGrid.setAlpha(70);
    displayGraphMajorXAxisGrid.setScale(1);
    displayGraph.addGraphElement(displayGraphMajorXAxisGrid);

    displayGraphMajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    displayGraphMajorYAxisGrid.setInterval(32);
    displayGraphMajorYAxisGrid.setLineWidth(1);
    displayGraphMajorYAxisGrid.setAlpha(70);
    displayGraphMajorYAxisGrid.setScale(1);
    displayGraph.addGraphElement(displayGraphMajorYAxisGrid);

    displayGraphBoxes1.setColor(touchgfx::Color::getColorFromRGB(196, 188, 22));
    displayGraphBoxes1.setBoxWidth(2);
    displayGraph.addGraphElement(displayGraphBoxes1);


    add(displayGraph);

    switchButton1.setXY(15, 220);
    switchButton1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_PRESSED_ID));
    switchButton1.setAlpha(205);
    switchButton1.setAction(buttonCallback);
    add(switchButton1);

    switchButton3.setXY(125, 219);
    switchButton3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_PRESSED_ID));
    switchButton3.setAlpha(205);
    switchButton3.setVisible(false);
    switchButton3.setAction(buttonCallback);
    add(switchButton3);

    buttonText1.setXY(44, 225);
    buttonText1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonText1.setLinespacing(0);
    buttonText1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PYQS));
    add(buttonText1);

    displayOptionScroll.setPosition(127, 206, 100, 64);
    displayOptionScroll.setHorizontal(false);
    displayOptionScroll.setCircular(true);
    displayOptionScroll.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    displayOptionScroll.setSwipeAcceleration(10);
    displayOptionScroll.setDragAcceleration(10);
    displayOptionScroll.setNumberOfItems(3);
    displayOptionScroll.setSelectedItemOffset(0);
    displayOptionScroll.setOvershootPercentage(75);
    displayOptionScroll.setDrawableSize(36, 15);
    displayOptionScroll.setDrawables(displayOptionScrollListItems, updateItemCallback);
    displayOptionScroll.animateToItem(0, 0);
    add(displayOptionScroll);

    measureOptionScroll.setPosition(239, 206, 100, 64);
    measureOptionScroll.setHorizontal(false);
    measureOptionScroll.setCircular(true);
    measureOptionScroll.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    measureOptionScroll.setSwipeAcceleration(10);
    measureOptionScroll.setDragAcceleration(10);
    measureOptionScroll.setNumberOfItems(10);
    measureOptionScroll.setSelectedItemOffset(0);
    measureOptionScroll.setOvershootPercentage(75);
    measureOptionScroll.setDrawableSize(36, 15);
    measureOptionScroll.setDrawables(measureOptionScrollListItems, updateItemCallback);
    measureOptionScroll.animateToItem(0, 0);
    add(measureOptionScroll);

    measureText.setPosition(345, 225, 120, 24);
    measureText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    measureText.setLinespacing(0);
    Unicode::snprintf(measureTextBuffer, MEASURETEXT_SIZE, "%s", touchgfx::TypedText(T_MEASUREDDATA).getText());
    measureText.setWildcard(measureTextBuffer);
    measureText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZX2Y));
    add(measureText);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{
    displayOptionScroll.initialize();
    for (int i = 0; i < displayOptionScrollListItems.getNumberOfDrawables(); i++)
    {
        displayOptionScrollListItems[i].initialize();
    }
    measureOptionScroll.initialize();
    for (int i = 0; i < measureOptionScrollListItems.getNumberOfDrawables(); i++)
    {
        measureOptionScrollListItems[i].initialize();
    }
}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &switchButton1)
    {
        //switchScreen1
        //When switchButton1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
    if (&src == &switchButton3)
    {
        //switchScreen3
        //When switchButton3 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}

void Screen1ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &displayOptionScrollListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        displayOption* cc = (displayOption*)d;
        displayOptionScrollUpdateItem(*cc, itemIndex);
    }

    if (items == &measureOptionScrollListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        measureOption* cc = (measureOption*)d;
        measureOptionScrollUpdateItem(*cc, itemIndex);
    }
}
